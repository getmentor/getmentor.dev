server:
  log_level: info

# Metrics configuration
metrics:
  wal_directory: /tmp/grafana-agent-wal
  global:
    scrape_interval: 60s
    remote_write:
      - url: ${GRAFANA_CLOUD_METRICS_URL}
        basic_auth:
          username: ${GRAFANA_CLOUD_METRICS_USERNAME}
          password: ${GRAFANA_CLOUD_API_KEY}

  configs:
    - name: default
      scrape_configs:
        # Scrape application metrics from Next.js app
        - job_name: 'nextjs-app'
          static_configs:
            - targets: ['localhost:3000']
              labels:
                instance: '${HOSTNAME:-localhost}'
                environment: '${NODE_ENV:-production}'
                app: 'getmentor'

        # Self-monitoring: Grafana Agent metrics
        - job_name: 'grafana-agent'
          static_configs:
            - targets: ['localhost:12345']
              labels:
                instance: '${HOSTNAME:-localhost}'
                environment: '${NODE_ENV:-production}'
                app: 'getmentor'

# Logs configuration
logs:
  positions_directory: /tmp/grafana-agent-positions
  configs:
    - name: default
      clients:
        - url: ${GRAFANA_CLOUD_LOGS_URL}
          basic_auth:
            username: ${GRAFANA_CLOUD_LOGS_USERNAME}
            password: ${GRAFANA_CLOUD_API_KEY}

      scrape_configs:
        # Collect application logs from file
        - job_name: nextjs-app
          static_configs:
            - targets: [localhost]
              labels:
                job: nextjs-app
                instance: '${HOSTNAME:-localhost}'
                environment: '${NODE_ENV:-production}'
                app: 'getmentor'
                __path__: /app/logs/*.log

          pipeline_stages:
            # Parse JSON logs
            - json:
                expressions:
                  timestamp: timestamp
                  level: level
                  message: message
                  service: service
                  trace_id: trace_id
                  span_id: span_id

            # Use timestamp from log
            - timestamp:
                source: timestamp
                format: RFC3339

            # Set log level
            - labels:
                level:
                service:

            # Extract additional metadata
            - output:
                source: message

# Integration for future traces (OpenTelemetry)
traces:
  configs:
    - name: default
      receivers:
        otlp:
          protocols:
            http:
              endpoint: "0.0.0.0:4318"
            grpc:
              endpoint: "0.0.0.0:4317"

      remote_write:
        - endpoint: ${GRAFANA_CLOUD_TRACES_URL}
          basic_auth:
            username: ${GRAFANA_CLOUD_TRACES_USERNAME}
            password: ${GRAFANA_CLOUD_API_KEY}

      # Tail-based sampling configuration
      tail_sampling:
        policies:
          - always_sample:
              decision: 10  # Sample 10% of traces
          - latency:
              threshold_ms: 1000  # Always sample slow requests
