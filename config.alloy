// Grafana Alloy Configuration for GetMentor.dev
// This configuration replaces the previous Grafana Agent setup

// Logging configuration
logging {
  level  = "info"
  format = "logfmt"
}

// Prometheus metrics scraping
prometheus.scrape "nextjs_app" {
  targets = [
    {
      __address__ = "localhost:3000",
      instance    = env("HOSTNAME") != "" ? env("HOSTNAME") : "localhost",
      environment = env("NODE_ENV") != "" ? env("NODE_ENV") : "production",
      app         = "getmentor",
    },
  ]
  forward_to      = [prometheus.remote_write.grafana_cloud.receiver]
  scrape_interval = "60s"
}

// Self-monitoring: Grafana Alloy metrics
prometheus.scrape "alloy_self_monitoring" {
  targets = [
    {
      __address__ = "localhost:12345",
      instance    = env("HOSTNAME") != "" ? env("HOSTNAME") : "localhost",
      environment = env("NODE_ENV") != "" ? env("NODE_ENV") : "production",
      app         = "getmentor",
    },
  ]
  forward_to      = [prometheus.remote_write.grafana_cloud.receiver]
  scrape_interval = "60s"
}

// Prometheus remote write to Grafana Cloud
prometheus.remote_write "grafana_cloud" {
  endpoint {
    url = env("GRAFANA_CLOUD_METRICS_URL")

    basic_auth {
      username = env("GRAFANA_CLOUD_METRICS_USERNAME")
      password = env("GRAFANA_CLOUD_API_KEY")
    }
  }
}

// Local file match for log files
local.file_match "app_logs" {
  path_targets = [
    {
      __path__ = "/app/logs/*.log",
      job      = "nextjs-app",
      instance = env("HOSTNAME") != "" ? env("HOSTNAME") : "localhost",
      environment = env("NODE_ENV") != "" ? env("NODE_ENV") : "production",
      app      = "getmentor",
    },
  ]
}

// Loki source file - tail application logs
loki.source.file "app_logs" {
  targets    = local.file_match.app_logs.targets
  forward_to = [loki.process.parse_json.receiver]
}

// Loki process - parse JSON logs and extract fields
loki.process "parse_json" {
  forward_to = [loki.write.grafana_cloud.receiver]

  // Parse JSON log format
  stage.json {
    expressions = {
      timestamp = "timestamp",
      level     = "level",
      message   = "message",
      service   = "service",
      trace_id  = "trace_id",
      span_id   = "span_id",
    }
  }

  // Use timestamp from log entry
  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }

  // Add labels for level and service
  stage.labels {
    values = {
      level   = "level",
      service = "service",
    }
  }

  // Set message as output
  stage.output {
    source = "message"
  }
}

// Loki write to Grafana Cloud
loki.write "grafana_cloud" {
  endpoint {
    url = env("GRAFANA_CLOUD_LOGS_URL")

    basic_auth {
      username = env("GRAFANA_CLOUD_LOGS_USERNAME")
      password = env("GRAFANA_CLOUD_API_KEY")
    }
  }
}

// OpenTelemetry receiver for traces (HTTP)
otelcol.receiver.otlp "default" {
  http {
    endpoint = "0.0.0.0:4318"
  }

  grpc {
    endpoint = "0.0.0.0:4317"
  }

  output {
    metrics = [otelcol.processor.batch.default.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [otelcol.processor.batch.default.input]
  }
}

// Batch processor for OTLP data
otelcol.processor.batch "default" {
  output {
    metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
    logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
    traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
  }
}

// OTLP exporter to Grafana Cloud
otelcol.exporter.otlphttp "grafana_cloud" {
  client {
    endpoint = env("GRAFANA_CLOUD_TRACES_URL")

    auth {
      authenticator = otelcol.auth.basic.grafana_cloud.handler
    }
  }
}

// Basic auth for OTLP
otelcol.auth.basic "grafana_cloud" {
  username = env("GRAFANA_CLOUD_TRACES_USERNAME")
  password = env("GRAFANA_CLOUD_API_KEY")
}
